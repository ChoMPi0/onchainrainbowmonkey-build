{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","state","contract","methods","send","from","account","value","freeMintsRemaining","isFreeHolder","mintCost","once","_ref","asyncToGenerator","regenerator_default","a","mark","_callee4","transactionHash","wrap","_context4","prev","next","console","log","stop","_x","apply","arguments","on","_ref2","_callee5","confirmationNumber","receipt","mintedCount","_context5","status","getMintedCount","sent","setState","toString","_x2","_x3","networkSupported","totalSupply","mintCostEther","freeMints","owner","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","OnChainRainbowMonkeyNFT","networks","abi","address","Contract","utils","fromWei","_this2","react_default","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","rel","target","role","src","alt","onSubmit","event","preventDefault","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.800a7607.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport OnChainRainbowMonkeyNFT from '../abis/OnChainRainbowMonkeyNFT.json'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    if (networkId !== 137) {\n      this.setState({ networkSupported: false })\n    } else {\n      const networkData = OnChainRainbowMonkeyNFT.networks[networkId]\n      if (networkData) {\n        this.setState({ networkSupported: true })\n        const abi = OnChainRainbowMonkeyNFT.abi\n        const address = networkData.address\n        const contract = new web3.eth.Contract(abi, address)\n        this.setState({ contract })\n        const totalSupply = await contract.methods.totalSupply.call()\n        this.setState({ totalSupply })\n        console.log('Total Supply of NFTs: ' + totalSupply.toString())\n        const mintedCount = await contract.methods.getMintedCount().call()\n        this.setState({ mintedCount })\n        console.log('Minted NFTs: ' + mintedCount.toString())\n        const mintCost = await contract.methods.mintCost.call()\n        this.setState({ mintCost })\n        this.setState({ mintCostEther: web3.utils.fromWei(mintCost.toString(), 'ether').toString() })\n        console.log('Mint Price: ' + this.state.mintCostEther + ' MATIC')\n        const freeMints = await contract.methods.freeMints.call()\n        this.setState({ freeMints })\n        let freeMintsRemaining = freeMints - mintedCount;\n        if (freeMintsRemaining < 0) freeMintsRemaining = 0;\n        this.setState({ freeMintsRemaining })\n        console.log('Free mints: ' + this.state.freeMints)\n        const isFreeHolder = await contract.methods.isFreeHolder(this.state.account).call()\n        this.setState({ isFreeHolder })\n        console.log('Is free nft holder: ' + isFreeHolder);\n      } else {\n        console.log('Smart contract not deployed to detected network.')\n        this.setState({ networkSupported: false })\n      }\n    }\n  }\n\n  mint = () => {\n    this.state.contract.methods.mint().send({ from: this.state.account, value: (this.state.freeMintsRemaining > 0 && !this.state.isFreeHolder ? 0 : this.state.mintCost) })\n    .once('transactionHash', async (transactionHash) => {\n      console.log('Transaction hash: ' + transactionHash)\n    })\n    .on('confirmation', async (confirmationNumber, receipt) => {  \n      if (receipt.status) {\n        const mintedCount = await this.state.contract.methods.getMintedCount().call()\n        this.setState({ mintedCount })\n        console.log('Minted NFTs: ' + mintedCount.toString())\n        const isFreeHolder = await this.state.contract.methods.isFreeHolder(this.state.account).call()\n        this.setState({ isFreeHolder })\n        console.log('Is free nft holder: ' + isFreeHolder);\n      }\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      networkSupported: false,\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      mintedCount: 0,\n      mintCost: 0,\n      mintCostEther: '0',\n      freeMints: 0,\n      freeMintsRemaining: 0,\n      isFreeHolder: false,\n      owner: '0x8B190f0BcC72aB322eF9209030B4358eE71220E0'\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark navbar-expand-lg\">\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"https://opensea.io/collection/onchainrainbowmonkeynft\" rel=\"noopener noreferrer\" target=\"_blank\">OpenSea</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"#\" rel=\"noopener noreferrer\" target=\"_blank\">LooksRare</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"https://polygonscan.com/address/0x9bb7f0ff816ff2150fd84667f03890a6add40d41\" rel=\"noopener noreferrer\" target=\"_blank\">Polygonscan</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"https://twitter.com/RainbowOnChain\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"#\" rel=\"noopener noreferrer\" target=\"_blank\">Discord</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n\n        <div className=\"container-fluid pt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12\">\n              <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col col-lg-8 offset-lg-2 text-center\">\n                        <div className=\"container\">\n                            <div className=\"row examples\">\n                                <div className=\"col\"><img src=\"./../assets/images/example-1.png\" className=\"img-fluid\" alt=\"Example 1\" /></div>\n                                <div className=\"col\"><img src=\"./../assets/images/example-2.png\" className=\"img-fluid\" alt=\"Example 2\" /></div>\n                                <div className=\"col d-none d-md-block\"><img src=\"./../assets/images/example-3.png\" className=\"img-fluid\" alt=\"Example 3\" /></div>\n                                <div className=\"col d-none d-lg-block\"><img src=\"./../assets/images/example-4.png\" className=\"img-fluid\" alt=\"Example 4\" /></div>\n                                <div className=\"col d-none d-lg-block\"><img src=\"./../assets/images/example-5.png\" className=\"img-fluid\" alt=\"Example 5\" /></div>\n                            </div>\n                        </div>\n                        <div className=\"description pt-5\">\n                            <h1>Mint an NFT</h1>\n                            <h5>Currently minted <span id=\"mintedCount\">{this.state.mintedCount.toString()}</span>/{this.state.totalSupply.toString()}</h5>\n                            <h6>Mint cost is {this.state.mintCostEther} MATIC</h6>\n                            <h6>Free mints available: {this.state.freeMintsRemaining.toString()}</h6>\n                            <br />\n                            <form onSubmit={(event) => {\n                                event.preventDefault()\n                                if (this.state.networkSupported) {\n                                    this.mint()\n                                } else {\n                                    window.alert('Please switch to the Polygon network.')\n                                }\n                            }}>\n                            <input\n                                type='submit'\n                                className='btn btn-primary'\n                                value='MINT'\n                            />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}